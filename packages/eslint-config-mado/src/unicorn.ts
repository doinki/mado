import type { ConfigWithExtends } from '@eslint/config-helpers';
import eslintPluginUnicorn from 'eslint-plugin-unicorn';
import type { InfiniteDepthConfigWithExtends } from 'typescript-eslint';

export function generateConfig(options?: { files?: Array<string | string[]> }): InfiniteDepthConfigWithExtends {
  return {
    files: options?.files || ['**/*.?(c|m)@(j|t)s?(x)'],
    languageOptions: {
      ecmaVersion: 'latest',
      sourceType: 'module',
    },
    name: 'mado/unicorn',
    plugins: {
      unicorn: eslintPluginUnicorn,
    },
    rules,
  };
}

// v59.0.1
// https://github.com/sindresorhus/eslint-plugin-unicorn
const rules = {
  'unicorn/better-regex': 'warn',
  'unicorn/catch-error-name': 'off',
  'unicorn/consistent-assert': 'off',
  'unicorn/consistent-date-clone': 'warn',
  'unicorn/consistent-destructuring': 'off',
  'unicorn/consistent-empty-array-spread': 'warn',
  'unicorn/consistent-existence-index-check': 'off',
  'unicorn/consistent-function-scoping': 'off',
  'unicorn/custom-error-definition': 'off',
  'unicorn/empty-brace-spaces': 'off',
  'unicorn/error-message': 'off',
  'unicorn/escape-case': 'off',
  'unicorn/expiring-todo-comments': 'off',
  'unicorn/explicit-length-check': 'off',
  'unicorn/filename-case': 'off',
  'unicorn/import-style': 'off',
  'unicorn/new-for-builtins': 'warn',
  'unicorn/no-abusive-eslint-disable': 'off',
  'unicorn/no-accessor-recursion': 'off',
  'unicorn/no-anonymous-default-export': 'off',
  'unicorn/no-array-callback-reference': 'off',
  'unicorn/no-array-for-each': 'off',
  'unicorn/no-array-method-this-argument': 'off',
  'unicorn/no-array-reduce': 'off',
  'unicorn/no-await-expression-member': 'off',
  'unicorn/no-await-in-promise-methods': 'warn',
  'unicorn/no-console-spaces': 'warn',
  'unicorn/no-document-cookie': 'off',
  'unicorn/no-empty-file': 'off',
  'unicorn/no-for-loop': 'warn',
  'unicorn/no-hex-escape': 'off',
  'unicorn/no-instanceof-builtins': 'warn',
  'unicorn/no-invalid-fetch-options': 'warn',
  'unicorn/no-invalid-remove-event-listener': 'warn',
  'unicorn/no-keyword-prefix': 'off',
  'unicorn/no-lonely-if': 'off',
  'unicorn/no-magic-array-flat-depth': 'off',
  'unicorn/no-named-default': 'off',
  'unicorn/no-negated-condition': 'warn',
  'unicorn/no-negation-in-equality-check': 'warn',
  'unicorn/no-nested-ternary': 'off',
  'unicorn/no-new-array': 'warn',
  'unicorn/no-new-buffer': 'warn',
  'unicorn/no-null': 'off',
  'unicorn/no-object-as-default-parameter': 'off',
  'unicorn/no-process-exit': 'off',
  'unicorn/no-single-promise-in-promise-methods': 'off',
  'unicorn/no-static-only-class': 'off',
  'unicorn/no-thenable': 'off',
  'unicorn/no-this-assignment': 'off',
  'unicorn/no-typeof-undefined': 'off',
  'unicorn/no-unnecessary-array-flat-depth': 'warn',
  'unicorn/no-unnecessary-array-splice-count': 'warn',
  'unicorn/no-unnecessary-await': 'warn',
  'unicorn/no-unnecessary-polyfills': 'off',
  'unicorn/no-unnecessary-slice-end': 'warn',
  'unicorn/no-unreadable-array-destructuring': 'off',
  'unicorn/no-unreadable-iife': 'off',
  'unicorn/no-unused-properties': 'off',
  'unicorn/no-useless-fallback-in-spread': 'warn',
  'unicorn/no-useless-length-check': 'warn',
  'unicorn/no-useless-promise-resolve-reject': 'warn',
  'unicorn/no-useless-spread': 'warn',
  'unicorn/no-useless-switch-case': 'warn',
  'unicorn/no-useless-undefined': 'warn',
  'unicorn/no-zero-fractions': 'off',
  'unicorn/number-literal-case': 'warn',
  'unicorn/numeric-separators-style': 'warn',
  'unicorn/prefer-add-event-listener': 'warn',
  'unicorn/prefer-array-find': 'warn',
  'unicorn/prefer-array-flat': 'warn',
  'unicorn/prefer-array-flat-map': 'warn',
  'unicorn/prefer-array-index-of': 'warn',
  'unicorn/prefer-array-some': 'warn',
  'unicorn/prefer-at': 'warn',
  'unicorn/prefer-blob-reading-methods': 'off',
  'unicorn/prefer-code-point': 'warn',
  'unicorn/prefer-date-now': 'warn',
  'unicorn/prefer-default-parameters': 'off',
  'unicorn/prefer-dom-node-append': 'warn',
  'unicorn/prefer-dom-node-dataset': 'off',
  'unicorn/prefer-dom-node-remove': 'warn',
  'unicorn/prefer-dom-node-text-content': 'warn',
  'unicorn/prefer-event-target': 'off',
  'unicorn/prefer-export-from': 'warn',
  'unicorn/prefer-global-this': 'off',
  'unicorn/prefer-import-meta-properties': 'off',
  'unicorn/prefer-includes': 'warn',
  'unicorn/prefer-json-parse-buffer': 'off',
  'unicorn/prefer-keyboard-event-key': 'off',
  'unicorn/prefer-logical-operator-over-ternary': 'warn',
  'unicorn/prefer-math-min-max': 'warn',
  'unicorn/prefer-math-trunc': 'warn',
  'unicorn/prefer-modern-dom-apis': 'warn',
  'unicorn/prefer-modern-math-apis': 'warn',
  'unicorn/prefer-module': 'off',
  'unicorn/prefer-native-coercion-functions': 'off',
  'unicorn/prefer-negative-index': 'warn',
  'unicorn/prefer-node-protocol': 'warn',
  'unicorn/prefer-number-properties': 'warn',
  'unicorn/prefer-object-from-entries': 'warn',
  'unicorn/prefer-optional-catch-binding': 'warn',
  'unicorn/prefer-prototype-methods': 'off',
  'unicorn/prefer-query-selector': 'off',
  'unicorn/prefer-reflect-apply': 'off',
  'unicorn/prefer-regexp-test': 'warn',
  'unicorn/prefer-set-has': 'warn',
  'unicorn/prefer-set-size': 'warn',
  'unicorn/prefer-single-call': 'warn',
  'unicorn/prefer-spread': 'warn',
  'unicorn/prefer-string-raw': 'warn',
  'unicorn/prefer-string-replace-all': 'off',
  'unicorn/prefer-string-slice': 'off',
  'unicorn/prefer-string-starts-ends-with': 'warn',
  'unicorn/prefer-string-trim-start-end': 'warn',
  'unicorn/prefer-structured-clone': 'off',
  'unicorn/prefer-switch': 'off',
  'unicorn/prefer-ternary': 'off',
  'unicorn/prefer-top-level-await': 'off',
  'unicorn/prefer-type-error': 'off',
  'unicorn/prevent-abbreviations': 'off',
  'unicorn/relative-url-style': 'warn',
  'unicorn/require-array-join-separator': 'off',
  'unicorn/require-number-to-fixed-digits-argument': 'off',
  'unicorn/require-post-message-target-origin': 'warn',
  'unicorn/string-content': 'off',
  'unicorn/switch-case-braces': 'off',
  'unicorn/template-indent': 'off',
  'unicorn/text-encoding-identifier-case': 'warn',
  'unicorn/throw-new-error': 'warn',
} satisfies ConfigWithExtends['rules'];
